<% include ../partials/header.ejs %>
<% include ./user-style.ejs %>
<% include ../partials/navigation.ejs %>


<div class="container">
	<div id="profile-details">
		<ul>
			<li>
				Username: <%= user.name %>
				<a href="#" class="reveal-input" id="edit-username">edit</a>
				<input type="text" id="new-username" name="username" value="" 
						class="styled-input"  placeholder="new username" />
			</li>
			<li>
				Email: <%= user.email %> 
				<a href="#" class="reveal-input" id="edit-email">edit</a>
				<input type="text" name="email" value="" id="new-email" 
						class="styled-input" placeholder="new email"/>
			</li>
			<li>
				Password: &#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;
				<a href="#" class="reveal-input" id="edit-password">edit</a>
				<input type="password" name="password" value="" id="new-password" 
						class="styled-input" placeholder="new password" />
			</li>
			<li>
				<input type="submit" class="styled-button" id="update-profile" value="update" />
				<input type="submit" class="styled-button" id="cancel-update" value="cancel" />
			</li>
		</ul>
	</div>	
	<p>Emails are used to receive notifications, or when you forget your password.</p>
	<div id="errors-container"></div>
	<p id="form-message"></p>
</div>

<script type="text/javascript">

$(window).onload = function(){

// Form elements
var usernameInput = $("#new-username");
var emailInput    = $("#new-email");	
var passwordInput = $("#new-password");

// Display buttons
var usernameButton = $("#edit-username");
var emailButton    = $("#edit-email");
var passwordButton = $("#edit-password");

// Form buttons
var updateButton = $("#update-profile");
var cancelButton = $("#cancel-update");

// Form errors or messages - font is red by default.
var messageContainer = $("#form-message");
// The response from the server on updating user's info.
var errorsContainer  = $("#errors-container"); 

// Hiding inputs until user clicks to edit them.
usernameInput.hide();
emailInput.hide();
passwordInput.hide();
	
// Hiding submit and cancel buttons, until there's data to submit.
updateButton.hide();
cancelButton.hide();

usernameButton.on("click", function(event){
	event.preventDefault();
	usernameButton.hide();
	usernameInput.val(""); // Clearing any browser value
	usernameInput.show();
	showFormButtons();
});

emailButton.on("click", function(event){
	event.preventDefault();
	emailButton.hide();
	emailInput.val(""); // Clearing any browser value
	emailInput.show();
	showFormButtons();
});

passwordButton.on("click", function(event){
	event.preventDefault();
	passwordButton.hide();
	passwordInput.val(""); // Clearing any browser value
	passwordInput.show();
	showFormButtons();
});

cancelButton.on("click", function(){
	resetForm();
});

/*
When the user clicks "update", a request with all inputs 
is send to the server, regardless of whether the user 
wants to change every value or not.
*/
updateButton.on("click", function(event){
	event.preventDefault();
	var username = usernameInput.val().trim();
	var email    = emailInput.val().trim();
	var password = passwordInput.val().trim();


	// Sending null to server to avoid updating undesired values.
	if(!username || username.length == 0){
		username == null;
	}else if(username.length < 4){
		// Warn the user
	}

	if(!email || email.length == 0){
		email == null;
	}else if(email.length < 4){
		// Warn the user
	}

	if(!password || password.length == 0){
		password == null;
	}else if(password.length < 4){
		// Warn the user
	}

	// Send update request to server.
	$.ajax({
		method: "POST",
		url   : "/user/update-profile",
		data  : {
			username: username,
			email   : email,
			password: password
		},
		xhrFields:{
			// Makes the server authenticate the user.
			withCredentials: true
		},
		success: function(response){

			// Unexpected large response
			// All three form errors are 111 in length. 
			if(response.length > 120){
				return;
			}

			// Server sends either an array of errors, or a message object.
			console.log(response);
			console.log("Data sent to server.");

			// Handles the response whether it's a success or a failure.
			handleFormResponse(errorsContainer, response);

			/*switch(response){
				// Success - use info updated.
				case response.message:
					// declareSuccess(messageContainer);
					break;

				// Errors list received
				default:
					handleFormResponse(messageContainer, response);
					break;
			}*/
		},
		error: function(){
			// Data failed to reach server.
			// warnUser(messageContainer, "Failed to update. Try again later");
		}
	});

	// Clearing input values, to allow for a new change/update.
	clearInputValues(usernameInput, emailInput, passwordInput);
	resetForm();
});


// Handle form response from server (display errors, or success message).
function handleFormResponse(errorsContainer, formResponse){

	var resposne;
	try{
		response = JSON.parse(formResponse);
	}catch(error){
		console.log("Error occured in JSON parsing.");
		console.log(error);
		return;
	}

	if(response.errors && response.errors.length > 0 ){

		// Errors array exists.
		for(var i = 0; i < response.errors.length; i++){
			// Displaying form errors for the user.
			echoMessage(errorsContainer, response.errors[i], "red");
			console.log(response.errors[i]);
		}
		
	// Success - user info updated.
	}else if(response.message && response.message.length > 0){
		echoMessage(errorsContainer, response.message, "green");
		console.log(response.message);
	}

}

/*// Handle errors returned by the server (json).
function getFormErrors(response){
	// Errors are sent as json.
	var errors;
	
	try{
		errors = JSON.parse(response.errors);
	}catch(error){
		// Ignore error - non-json response passed. 
		console.log("error occurred", error);
	}
	return errors;
}*/


// Warn the user about invalid values.
/*function warnUser(messageContainer, message){

	messageContainer.html(message);
	messageContainer.show();
}*/

// Declare info updated successfuly.
/*function declareSuccess(messageContainer){
	messageContainer.css("color", "green");
	warnUser(messageContainer, "User info updated.");
	// Resetting the color after displaying it, for any new errors.
	messageContainer.css("color", "red"); 
}
*/

// Echo a message to the user - under errors-container.
function echoMessage(container, message, color){
	container.append('<p style="color:'+ color +';">'+ message +'</p>');	
}

// Resets all form components.
function resetForm(){
	usernameButton.show();
	emailButton.show();
	passwordButton.show();

	usernameInput.hide();
	emailInput.hide();
	passwordInput.hide();

	updateButton.hide();
	cancelButton.hide();

	errorsContainer.children().remove();
}

// Displays a button, if it's hidden.
function displayButton(button, display){
	if(button.css("display") == "none"){
		button.css("display", display);
	}
}

// Displays the form buttons if they are hidden.
function showFormButtons(){
	displayButton(updateButton, "inline-block");
	displayButton(cancelButton, "inline-block");
}

function clearInputValues(usernameInput, emailInput, passwordInput){
	usernameInput.val("");
	emailInput.val("");
	passwordInput.val("");
}

}();
</script>

<% include ../partials/footer.ejs %>